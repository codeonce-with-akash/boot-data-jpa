package com.data.jpa.api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.data.jpa.entity.Movie;
import com.data.jpa.exceptions.MovieNotFoundException;
import com.data.jpa.service.IMovieService;

@RestController
@RequestMapping("/api/data/jpa/movie")
public class MovieRestController {
	
	@Autowired
	private IMovieService movieService;
	
	@PostMapping("/create")
	public ResponseEntity<String> registerMovie(@RequestBody Movie movie){
		ResponseEntity<String> resp = null;
		try {
			String response = movieService.createMovie(movie);
			resp = new ResponseEntity<String>(response, HttpStatus.CREATED);
		} catch (Exception e) {
			resp = new ResponseEntity<String>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return resp;
	}
	
	@GetMapping("/fetch/count")
	public ResponseEntity<String> fetchMoviesCount(){
		ResponseEntity<String> resp = null;
		try {
			Long movieCount = movieService.fetchMovieCount();
			resp = new ResponseEntity<String>("Total '"+movieCount+"' movies are available!", HttpStatus.OK);
		} catch (Exception e) {
			resp = new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
		return resp;
	}
	
	@GetMapping("/check/{movieId}")
	public ResponseEntity<String> isMoviePresentById(@PathVariable(name = "movieId") Long movieId){
		ResponseEntity<String> resp = null;
		try {
			resp = new ResponseEntity<String>(movieService.checkMovieById(movieId), HttpStatus.OK);
		} catch (MovieNotFoundException mnfe) {
			resp = new ResponseEntity<String>(mnfe.getMessage(), HttpStatus.NOT_FOUND);
		}
		return resp;
	}
	
	@GetMapping("/fetch/all")
	public ResponseEntity<?> fetchAllMovies(){
		ResponseEntity<?> resp = null;
		try {
			Iterable<Movie> allMovies = movieService.fetchAllMovies();
			System.out.println("--------printing list of movies using enhanced for loop---------");
			for(Movie movie : allMovies) {
				System.out.println(movie);
			}
			resp = new ResponseEntity<Iterable<Movie>>(allMovies, HttpStatus.OK);
		} catch (Exception e) {
			resp = new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
		return resp;
	}
}
